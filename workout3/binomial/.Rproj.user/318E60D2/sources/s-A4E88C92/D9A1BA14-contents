# PRIVATE CHECKER FUNCTIONS
# tests if an input prob is a valid probability value (0<=p<=1)
check_prob <- function(prob){
#if (length(prob) != 1){
#  stop("prob should be of length 1")
# }
if (length(prob) == 1 & prob >= 0 & prob <= 1){
result = TRUE
}else{
stop("invalid prob value")
}
return(result)
}
expect_error(check_prob(1:5))
# PRIVATE CHECKER FUNCTIONS
# tests if an input prob is a valid probability value (0<=p<=1)
check_prob <- function(prob){
if (length(prob) != 1){
stop("prob should be of length 1")
}
if (length(prob) == 1 & prob >= 0 & prob <= 1){
result = TRUE
}else{
stop("invalid prob value")
}
return(result)
}
expect_error(check_prob(1:5))
devtools::test()              # run tests
expect_true(check_prob(0.2))
expect_error(check_prob(-1))
expect_error(check_prob(2))
expect_length(check_prob(1), 1)
expect_error(check_prob(1:5))
expect_error(check_prob("abc"))
test_that("check_prob gets an error if prob is invalid",{
expect_error(check_prob(1:5))
expect_error(check_prob("abc"))
})
# check_trials
test_that("check_trials with trials being a non-negative integer",{
expect_true(check_trials(200))
expect_true(check_trials(5))
expect_true(check_trials(0))
})
expect_true(check_trials(200))
expect_true(check_trials(5))
expect_true(check_trials(0))
expect_length(check_trials(200), 1)
expect_error(check_trials(-2))
expect_error(check_trials(2.3))
expect_error(check_trials("abc"))
expect_true(check_success(2, 3))
expect_true(check_success(1:3, 4))
# tests if an input success is a valid value for number of successes (0<=k<=n)
check_success <- function(success, trials){
for (i in 1:length(success)){
if(success[i] > trials){
stop("invalid success value, success cannot be greater than trials")
}else if(success[i] - as.integer(success[i]) != 0){
stop("invalid success value, success should be an integer")
}else if(success[i] < 0){
stop("invalid success value, success cannot be smaller than 0")
}else{
return(TRUE)
}
}
}
expect_error(check_trials("abc"))
expect_true(check_success(1:3, 4))
expect_true(check_success(1:20, 40))
expect_error(check_prob(1:5))
devtools::test()              # run tests
expect_equal(nrow(bin_cumulative(3, 0.3)), 3+1)
expect_equal(nrow(bin_cumulative(8, 0.2)), 8+1)
devtools::test()              # run tests
devtools::test()              # run tests
bin_choose(n=6, k=3)
bin_probability(success = 3, trials = 6, prob = 0.5)
bin_probability(success = 3, trials = 6, prob = 0.5)
bin_choose(n=5, k=2)
bin_probability(success = 2, trials = 5, prob = 0.5)
dis1 <- bin_distribution(trials = 5, prob = 0.5)
dis1
plot(dis1)
bin_mean(10, 0.5)
bin_variance(10, 0.5)
bin_mode(10, 0.5)
bin_skewness(10, 0.5)
bin_mean(10, 0.5)
bin_variance(10, 0.5)
bin_mode(10, 0.5)
bin_skewness(10, 0.5)
bin_kurtosis(10, 0.5)
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
# development version from GitHub:
#install.packages("devtools")
# install "cointoss" (without vignettes)
devtools::install_github("stat133-sp19/hw-stat133-HonglingLei/workout3/binomial")
library(binomial)
# calculate number of combinations
# e.g. trials = 5, expected success = 2
bin_choose(n = 5, k = 2)
# calculate the probability of getting k success out of n trials, given prob per trial
# e.g. trials = 5, success = 2, prob = 0.5
bin_probability(success = 2, trials = 5, prob = 0.5)
# display the binomial distribution
dis1 <- bin_distribution(trials = 5, prob = 0.5)
dis1
# plot a histogram
plot(dis1)
# display the cumulative distribution
bin_cum<- bin_cumulative(trials = 5, prob = 0.5)
bin_cum
# plot a line graph
plot(bin_cum)
# calculate summary measures
bin_mean(5, 0.5)
bin_variance(5, 0.5)
bin_mode(5, 0.5)
bin_skewness(5, 0.5)
bin_kurtosis(5, 0.5)
# create a binomial variable with trials = 5 and prob per trial = 0.5
bin_var <- bin_variable(trials=5, prob=0.5)
bin_var
# obtain a summary of the binomial variable above
bin_sum <- summary(bin_var)
bin_sum
knitr::opts_chunk$set(collapse = T, comment="#>")
library(binomial)
library(ggplot2)
bin_choose(n=5, k=2)
bin_probability(success = 2, trials = 5, prob = 0.5)
dis1 <- bin_distribution(trials = 5, prob = 0.5)
dis1
plot(dis1)
bin_cum<- bin_cumulative(trials = 5, prob = 0.5)
bin_cum
plot(bin_cum)
bin_mean(5, 0.5)
bin_variance(5, 0.5)
bin_mode(5, 0.5)
bin_skewness(5, 0.5)
bin_kurtosis(5, 0.5)
bin_var <- bin_variable(trials=5, prob=0.5)
bin_var
bin_sum <- summary(bin_var)
bin_sum
# PRIVATE CHECKER FUNCTIONS
# tests if an input prob is a valid probability value (0<=p<=1)
check_prob <- function(prob){
if (length(prob) != 1){
stop("prob should be of length 1")
}
if (length(prob) == 1 & prob >= 0 & prob <= 1){
result = TRUE
}else{
stop("invalid prob value")
}
return(result)
}
# tests if an input trials is a valid value for number of trials (non negative integer)
check_trials <- function(trials){
if (length(trials) == 1 & trials >= 0 & (trials - as.integer(trials) == 0)){
result = TRUE
}else{
stop("invalid trials value")
}
return(result)
}
# tests if an input success is a valid value for number of successes (0<=k<=n)
check_success <- function(success, trials){
for (i in 1:length(success)){
if(success[i] > trials){
stop("invalid success value, success cannot be greater than trials")
}else if(success[i] - as.integer(success[i]) != 0){
stop("invalid success value, success should be an integer")
}else if(success[i] < 0){
stop("invalid success value, success cannot be smaller than 0")
}else{
return(TRUE)
}
}
}
# PRIVATE AUXILIARY FUNCTIONS
# calculates the expected value of a binomial distribution (np)
aux_mean <- function(trials, prob){
result = trials * prob
return(result)
}
# calculates the variance (np(1-p))
aux_variance <- function(trials, prob){
variance = trials * prob * (1 - prob)
return(variance)
}
# calculates the mode
aux_mode <- function(trials, prob){
n = trials * prob + prob
if(n - as.integer(n) == 0){
mode = c(n, n-1)
} else{
mode = floor(n)
}
return(mode)
}
# calculates the skewness
aux_skewness <- function(trials, prob){
skewness = (1-2*prob)/sqrt(trials*prob*(1-prob))
return(skewness)
}
# calculates the kurtosis
aux_kurtosis <- function(trials, prob){
kurtosis = (1-6*prob*(1-prob))/(trials*prob*(1-prob))
return(kurtosis)
}
#' @title choose n from k trials
#' @description calculates the number of combinaitons in whicc k successes can occur in n trials
#' @param n number of trials
#' @param k numebr of success
#' @return number of combinations
#' @export
#' @examples
#' bin_choose(n = 5, k = 2)
#' bin_choose(5, 0)
#' bin_choose(5, 1:3)
bin_choose <- function(n, k){
if (sum(as.integer(length(k <= n))) != length(k <= n)){
stop("k cannot be greater than n")
} else{
result = factorial(n) / (factorial(k) * factorial(n-k))
}
return(result)
}
#' #  probability of getting 2 successes in 5 trials
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#'
#' # probabilities of getting 2 or less successes in 5 trials
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
#'
#' # 55 heads in 100 tosses of a loaded coin with 45% chance of heads
#' bin_probability(success = 55, trials = 100, prob = 0.45)
bin_probability <- function(success, trials, prob){
if (check_success(success, trials) != TRUE){
stop("invalid success value")
}
if (check_trials(trials) != TRUE){
stop("invalid trials value")
}
if (check_prob(prob) != TRUE){
stop("invalid prob value")
}
if (check_success(success, trials)==TRUE & check_trials(trials)==TRUE & check_prob(prob)==TRUE){
Pr = bin_choose(trials, success) * (prob^success) * ((1-prob)^(trials-success))
}
return(Pr)
}
# 1.5)
#' @title binomial distribution
#' @description displays the distribution in table format
#' @param trials number of trials
#' @param prob probability of success in each trial
#' @return binomial distribution
#' @export
#' @examples
#' # binomial probability distribution
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
dat = data.frame(success = 0:trials,
probability = bin_probability(0:trials, trials, prob))
return(structure(dat, class = c("bindis", "data.frame")))
}
# plot.bindis
#' @export
plot.bindis <- function(dat, ...){
barplot(names.arg = dat$success,
height = dat$probability,
xlab = "success",
ylab = "probability")
}
# 1.6)
#' @title binomial cumulative distribution
#' @description calculates the cumulative distribution function
#' @param trials number of trials
#' @param prob probability of success per trial
#' @return binomial cumulative distribution
#' @export
#' @example
#' # binomial cumulative distribution
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob){
dat = data.frame(success = 0:trials, probability = bin_probability(0:trials, trials, prob))
dat$cumulative = rep(0, trials+1)
for (i in 0:trials+1){
dat$cumulative[i] = sum(dat$probability[1:i])
}
return(structure(dat, class = c("bincum", "data.frame")))
}
# plot.bincum
#' @export
plot.bincum <- function(dat, ...){
plot(x = dat$success,
y = dat$cumulative,
type = "b",
xlab = "successes",
ylab = "probaility")
}
# 1.7)
#' @title binary variable
#' @description calculates the cumulative distribution function
#' @param trials number of trials
#' @param prob probability of success per trial
#' @return binomial cumulative distribution
#' @export
bin_variable <- function(trials, prob){
check_trials(trials)
check_prob(prob)
A = structure(list(trials = trials, prob = prob), class = "binvar")
return(A)
}
# method print.binvar()
#' @export
print.binvar <- function(A){
print("Binomial variable")
print(" ")
print("Paramaters")
print(paste("- number of trials:", A$trials))
print(paste("- prob of success :", A$prob))
}
# method summary.binvar() and print.summary.binvar()
#' @export
summary.binvar <- function(B){
trials = B$trials
prob = B$prob
mean = aux_mean(B$trials, B$prob)
variance = aux_variance(B$trials, B$prob)
mode = aux_mode(B$trials, B$prob)
skewness = aux_skewness(B$trials, B$prob)
kurtosis = aux_kurtosis(B$trials, B$prob)
B = structure(list(trials = trials, prob =  prob,
mean = mean, variance = variance,
mode = mode, skewness = skewness,
kurtosis = kurtosis), class = "summary.binvar")
}
# print.summary.bivar()
#' @export
print.summary.binvar <- function(B){
print("Summary Binomial")
print("")
print("Paramaters")
print(paste("- number of trials:", B$trials))
print(paste("- prob of success :", B$prob))
print("")
print("Measures")
print(paste("- mean    :", B$mean))
print(paste("- variance:", B$variance))
print(paste("- mode    :", B$mode))
print(paste("- skewness:", B$skewness))
print(paste("- kurtosis:", B$kurtosis))
}
# 1.8) Functions of measures
#' @title binomial mean
#' @description calculates the mean of the binomial distribution
#' @param trials number of trials
#' @param prob probability of success per trial
#' @return the mean of binomial distribution
#' @export
#' @example
#' bin_mean(10, 0.3)
bin_mean <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
#' @title binomial variance
#' @description calculates the variance of the binomial distribution
#' @param trials number of trials
#' @param prob probability of success per trial
#' @return variance of the binomial distribution
#' @export
#' @example
#' bin_variance(10, 0.3)
bin_variance <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_variance(trials, prob))
}
#' @title binomial mode
#' @description calculates the mode of te binomial distribution
#' @param trials number of trials
#' @param prob probability of success per trial
#' @return mode of the binoial distribution
#' @export
#' @example
#' bin_mode(10, 0.3)
bin_mode <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_mode(trials, prob))
}
#' @title binomial skewness
#' @description calculates the skewness of the binomial distribution
#' @param trials number of trials
#' @param prob probability of success per trial
#' @return skewness
#' @export
#' @example
#' bin_skewness(10, 0.3)
bin_skewness <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials, prob))
}
#' @title binomial kurtosis
#' @description calculates the krtosis of the binomial distribution
#' @param trials number of trials
#' @param prob probability of success per trial
#' @return kurtosis
#' @export
#' @example
#' bin_kurtosis(10, 0.3)
bin_kurtosis <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials, prob))
}
library(testthat)
context("check checkers")
# check_prob
test_that("check_prob with prob between 0 and 1", {
expect_true(check_prob(0.2))
expect_error(check_prob(-1))
expect_error(check_prob(2))
})
test_that("check_prob with prob of length 1",{
expect_length(check_prob(1), 1)
})
test_that("check_prob gets an error if prob is invalid",{
expect_error(check_prob(1:5))
expect_error(check_prob("abc"))
})
# check_trials
test_that("check_trials with trials being a non-negative integer",{
expect_true(check_trials(200))
expect_true(check_trials(5))
expect_true(check_trials(0))
})
test_that("check_trials with trials of length 1",{
expect_length(check_trials(200), 1)
})
test_that("check_trials gets an error if trials is invalid",{
expect_error(check_trials(-2))
expect_error(check_trials(2.3))
expect_error(check_trials("abc"))
expect_error(check_trials(1:5))
})
# check_success
test_that("check_success with success in 0 <= k <= n",{
expect_true(check_success(2, 3))
expect_true(check_success(1:3, 4))
})
test_that("check_success with success being a vector of integers",{
expect_true(check_success(3, 4))
expect_true(check_success(3, 50))
expect_true(check_success(1:20, 40))
expect_true(check_success(c(2,3,6,7,5,8,4), 10))
})
test_that("check_success has length 1",{
expect_length(check_success(3, 4), 1)
expect_length(check_success(c(1,2,3), 4), 1)
})
test_that("check_success gets an error if inputs are invalid",{
expect_error(check_success(4, 3))
expect_error(check_success(4.5, 5))
expect_error(check_success(-1, 3))
expect_error(check_success("abc", 3))
})
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
knitr::opts_chunk$set(collapse = T, comment="#>")
library(binomial)
library(ggplot2)
bin_choose(n=5, k=2)
bin_probability(success = 2, trials = 5, prob = 0.5)
dis1 <- bin_distribution(trials = 5, prob = 0.5)
dis1
plot(dis1)
bin_cum<- bin_cumulative(trials = 5, prob = 0.5)
bin_cum
plot(bin_cum)
bin_mean(5, 0.5)
bin_variance(5, 0.5)
bin_mode(5, 0.5)
bin_skewness(5, 0.5)
bin_kurtosis(5, 0.5)
bin_var <- bin_variable(trials=5, prob=0.5)
bin_var
bin_sum <- summary(bin_var)
bin_sum
devtools::document()          # generate documentation
